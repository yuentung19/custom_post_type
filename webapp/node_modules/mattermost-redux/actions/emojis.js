'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createCustomEmoji = createCustomEmoji;
exports.getCustomEmojis = getCustomEmojis;
exports.getAllCustomEmojis = getAllCustomEmojis;
exports.deleteCustomEmoji = deleteCustomEmoji;

var _action_types = require('../action_types');

var _constants = require('../constants');

var _reduxBatchedActions = require('redux-batched-actions');

var _client = require('../client');

var _errors = require('./errors');

var _helpers = require('./helpers');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } // Copyright (c) 2017-present Mattermost, Inc. All Rights Reserved.
// See License.txt for license information.

function createCustomEmoji(emoji, image) {
    return (0, _helpers.bindClientFunc)(_client.Client4.createCustomEmoji, _action_types.EmojiTypes.CREATE_CUSTOM_EMOJI_REQUEST, [_action_types.EmojiTypes.RECEIVED_CUSTOM_EMOJI, _action_types.EmojiTypes.CREATE_CUSTOM_EMOJI_SUCCESS], _action_types.EmojiTypes.CREATE_CUSTOM_EMOJI_FAILURE, emoji, image);
}

// page and perPage to be used when converting to v4
function getCustomEmojis() {
    var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var perPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.General.PAGE_SIZE_DEFAULT;

    return (0, _helpers.bindClientFunc)(_client.Client4.getCustomEmojis, _action_types.EmojiTypes.GET_CUSTOM_EMOJIS_REQUEST, [_action_types.EmojiTypes.RECEIVED_CUSTOM_EMOJIS, _action_types.EmojiTypes.GET_CUSTOM_EMOJIS_SUCCESS], _action_types.EmojiTypes.GET_CUSTOM_EMOJIS_FAILURE, page, perPage);
}

function getAllCustomEmojis() {
    var _this = this;

    var perPage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants.General.PAGE_SIZE_MAXIMUM;

    return function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch, getState) {
            var hasMore, page, serverVersion, emojis;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            dispatch((0, _reduxBatchedActions.batchActions)([{ type: _action_types.EmojiTypes.GET_ALL_CUSTOM_EMOJIS_REQUEST }, { type: _action_types.EmojiTypes.CLEAR_CUSTOM_EMOJIS }]), getState);

                            hasMore = true;
                            page = 0;
                            serverVersion = getState().entities.general.serverVersion;

                        case 4:
                            _context.prev = 4;
                            emojis = [];

                            if (!(serverVersion.charAt(0) === '3')) {
                                _context.next = 13;
                                break;
                            }

                            _context.next = 9;
                            return _client.Client.getCustomEmojis();

                        case 9:
                            emojis = _context.sent;

                            hasMore = false;
                            _context.next = 17;
                            break;

                        case 13:
                            _context.next = 15;
                            return _client.Client4.getCustomEmojis(page, perPage);

                        case 15:
                            emojis = _context.sent;

                            if (emojis.length < perPage) {
                                hasMore = false;
                            } else {
                                page += 1;
                            }

                        case 17:

                            dispatch({
                                type: _action_types.EmojiTypes.RECEIVED_CUSTOM_EMOJIS,
                                data: emojis
                            });
                            _context.next = 24;
                            break;

                        case 20:
                            _context.prev = 20;
                            _context.t0 = _context['catch'](4);

                            (0, _helpers.forceLogoutIfNecessary)(_context.t0, dispatch);

                            return _context.abrupt('return', dispatch((0, _reduxBatchedActions.batchActions)([{ type: _action_types.EmojiTypes.GET_ALL_CUSTOM_EMOJIS_FAILURE, error: _context.t0 }, (0, _errors.logError)(_context.t0)(dispatch)]), getState));

                        case 24:
                            if (hasMore) {
                                _context.next = 4;
                                break;
                            }

                        case 25:

                            dispatch({ type: _action_types.EmojiTypes.GET_ALL_CUSTOM_EMOJIS_SUCCESS }, getState);

                            return _context.abrupt('return', { data: true });

                        case 27:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, _this, [[4, 20]]);
        }));

        return function (_x4, _x5) {
            return _ref.apply(this, arguments);
        };
    }();
}

function deleteCustomEmoji(emojiId) {
    var _this2 = this;

    return function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(dispatch, getState) {
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            dispatch({ type: _action_types.EmojiTypes.DELETE_CUSTOM_EMOJI_REQUEST }, getState);

                            _context2.prev = 1;
                            _context2.next = 4;
                            return _client.Client4.deleteCustomEmoji(emojiId);

                        case 4:
                            _context2.next = 11;
                            break;

                        case 6:
                            _context2.prev = 6;
                            _context2.t0 = _context2['catch'](1);

                            (0, _helpers.forceLogoutIfNecessary)(_context2.t0, dispatch);

                            dispatch((0, _reduxBatchedActions.batchActions)([{ type: _action_types.EmojiTypes.DELETE_CUSTOM_EMOJI_FAILURE, error: _context2.t0 }, (0, _errors.logError)(_context2.t0)(dispatch)]), getState);
                            return _context2.abrupt('return', { error: _context2.t0 });

                        case 11:

                            dispatch((0, _reduxBatchedActions.batchActions)([{
                                type: _action_types.EmojiTypes.DELETED_CUSTOM_EMOJI,
                                data: { id: emojiId }
                            }, {
                                type: _action_types.EmojiTypes.DELETE_CUSTOM_EMOJI_SUCCESS
                            }]), getState);

                            return _context2.abrupt('return', { data: true });

                        case 13:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, _this2, [[1, 6]]);
        }));

        return function (_x6, _x7) {
            return _ref2.apply(this, arguments);
        };
    }();
}