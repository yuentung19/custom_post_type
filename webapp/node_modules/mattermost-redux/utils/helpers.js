'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createShallowSelector = exports.createIdsSelector = undefined;
exports.memoizeResult = memoizeResult;

var _reselect = require('reselect');

var _shallowEquals = require('shallow-equals');

var _shallowEquals2 = _interopRequireDefault(_shallowEquals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright (c) 2017-present Mattermost, Inc. All Rights Reserved.
// See License.txt for license information.

function memoizeResult(func) {
    var lastArgs = null;
    var lastResult = null;

    // we reference arguments instead of spreading them for performance reasons
    return function shallowCompare() {
        if (!(0, _shallowEquals2.default)(lastArgs, arguments)) {
            //eslint-disable-line prefer-rest-params
            // apply arguments instead of spreading for performance.
            var result = Reflect.apply(func, null, arguments); //eslint-disable-line prefer-rest-params
            if (!(0, _shallowEquals2.default)(lastResult, result)) {
                lastResult = result;
            }
        }

        lastArgs = arguments; //eslint-disable-line prefer-rest-params
        return lastResult;
    };
}

// Use this selector when you want a shallow comparison of the arguments and you want to memoize the result
// try and use this only when your selector returns an array of ids
var createIdsSelector = exports.createIdsSelector = (0, _reselect.createSelectorCreator)(memoizeResult);

// Use this selector when you want a shallow comparison of the arguments and you don't need to memoize the result
var createShallowSelector = exports.createShallowSelector = (0, _reselect.createSelectorCreator)(_reselect.defaultMemoize, _shallowEquals2.default);